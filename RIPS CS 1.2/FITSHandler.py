# -*- coding: utf-8 -*-
"""
Created on Wed Aug  7 15:25:00 2019
@author: Patrick Lierle

Purpose: to provide a Watcher object that is capable of observing a directory
for FITS file additions, and is then able to call a function to write RIPS 
settings into the header of the new file. this file uses code from the Watchdog
third party package made for directory observation
"""

from astropy.io import fits
from Savefile import Savefile as sv
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from threading import Thread
import numpy as np
import time
import os

# this class provides functions for writing into FITS files
class FITSHandler:

    # write RIPS data from a passed in settings list, which would most likely
    # be generated by using the readFile function on a savefile
    def writeHeaderFromSettingsList(fitsfilepath, settings):
        print("waiting for file to become static")
        size1 = os.path.getsize(fitsfilepath)
        time.sleep(1)
        size2 = os.path.getsize(fitsfilepath)
        while not size1 == size2:
            size1 = size2
            time.sleep(1)
            size2 = os.path.getsize(fitsfilepath)
        print(fits.info(fitsfilepath))
        # use with here to ensure file is closed after process
        with fits.open(fitsfilepath, 'update') as hdul:
            hdr = hdul[0].header
            hdr.set('PREFILTR',settings[0], "Filter at Aperture")
            hdr.set('SPCFILTR',settings[1],"Spectral Channel Filter")
            hdr.set('IMGFILTR',settings[2],"Imaging Channel Filter")
            hdr.set('SLITSTEP',settings[3],"Slit Viewer Step Position")
            hdr.set('SLITANGL',settings[4],"Slit Viewer Angle (\")")
            hdr.set('ROTSTEP',settings[5],"Rotiserizer Step Position")
            hdr.set('ROTANGLE',settings[6],"Rotiserizer Phase Angle (deg)")
            hdr.set('ROTVOLT',settings[7],"Rotiserizer Voltage Position")
            hdr.set('SPCFSTEP',settings[8],"Spectral Focus Step Position")
            hdr.set('SPCFVOLT',settings[9],"Spectral Focus Voltage Position")
            hdr.set('IMGFSTEP',settings[10],"Imaging Focus Step Position")
            hdr.set('IMGFVOLT',settings[11],"Imaging Focus Voltage Position")
            hdr.set('WAVE',settings[12],"Centered Wavelength Estimate")
            hdr.set('GRATVOLT',settings[13],"Grating Voltage Position")
            hdr.set('LASTMOVE',settings[14],"Last Grating Move Direction (+/-)")
            hdr.set('PLATE',settings[15],"Platescale")
            hdr.set('GRATING',settings[16],"Installed Grating")
            print("whats the holdup?!")
        print("file saved")
        print(fits.info(fitsfilepath))
        
        
    # write a header file for an incoming fits file with the RIPS info
    def writeHeaderInSeparateFile(fitsfilepath, settings):
        # create a new fits header with the settings from the save
        hdr = fits.Header()
        hdr.set('PREFILTR',settings[0], "Filter at Aperture")
        hdr.set('SPCFILTR',settings[1],"Spectral Channel Filter")
        hdr.set('IMGFILTR',settings[2],"Imaging Channel Filter")
        hdr.set('SLITSTEP',settings[3],"Slit Viewer Step Position")
        hdr.set('SLITANGL',settings[4],"Slit Viewer Angle (\")")
        hdr.set('ROTSTEP',settings[5],"Rotiserizer Step Position")
        hdr.set('ROTANGLE',settings[6],"Rotiserizer Phase Angle (deg)")
        hdr.set('ROTVOLT',settings[7],"Rotiserizer Voltage Position")
        hdr.set('SPCFSTEP',settings[8],"Spectral Focus Step Position")
        hdr.set('SPCFVOLT',settings[9],"Spectral Focus Voltage Position")
        hdr.set('IMGFSTEP',settings[10],"Imaging Focus Step Position")
        hdr.set('IMGFVOLT',settings[11],"Imaging Focus Voltage Position")
        hdr.set('WAVE',settings[12],"Centered Wavelength Estimate")
        hdr.set('GRATVOLT',settings[13],"Grating Voltage Position")
        hdr.set('LASTMOVE',settings[14],"Last Grating Move Direction (+/-)")
        hdr.set('PLATE',settings[15],"Platescale")
        hdr.set('GRATING',settings[16],"Installed Grating")
        
        hdu = fits.PrimaryHDU(header=hdr)
        try:
            hdu.writeto(fitsfilepath[:-5]+"_HEADER.fits")
            print("file saved")
        except:
            print("file already exists")
        
            
    # write RIPS data from a passed in savefile, which has attributes for each
    # of the settings to be recorded
    def writeHeaderFromSavefile(fitsfilepath, save):
        # use with here to ensure file is closed after process
        with fits.open(fitsfilepath, 'update') as hdul:
            hdr = hdul[0].header
            hdr.set('PREFILTR',save.prefilter, "Filter at Aperture")
            hdr.set('SPCFILTR',save.spectralFilterSetting,"Spectral Channel Filter")
            hdr.set('IMGFILTR',save.imagingFilterSetting,"Imaging Channel Filter")
            hdr.set('SLITSTEP',save.slitSteps,"Slit Viewer Step Position")
            hdr.set('SLITANGL',save.slitAngle,"Slit Viewer Angle (\")")
            hdr.set('ROTSTEP',save.rotiserizerSteps,"Rotiserizer Step Position")
            hdr.set('ROTANGLE',save.rotiserizerAngle,"Rotiserizer Phase Angle (deg)")
            hdr.set('ROTVOLT',save.rotiserizerVolts,"Rotiserizer Voltage Position")
            hdr.set('SPCFSTEP',save.spectralFocusSteps,"Spectral Focus Step Position")
            hdr.set('SPCFVOLT',save.spectralFocusVolts,"Spectral Focus Voltage Position")
            hdr.set('IMGFSTEP',save.imagingFocusSteps,"Imaging Focus Step Position")
            hdr.set('IMGFVOLT',save.imagingFocusVolts,"Imaging Focus Voltage Position")
            hdr.set('WAVE',save.wavelength,"Centered Wavelength Estimate")
            hdr.set('GRATVOLT',save.gratingAngleVolts,"Grating Voltage Position")
            hdr.set('LASTMOVE',save.lastMove,"Last Grating Move Direction (+/-)")
            hdr.set('PLATE',save.platescale,"Platescale")
            hdr.set('GRATING',save.grating,"Installed Grating")
            
    # unused utility method for reading the header of a FITS file if ever necessary
    def readHeader(filepath):
        with fits.open(filepath) as hdul:
            hdr = hdul[0].header
            print(len(hdr))
            print(repr(hdr))
            
            
# this class defines the primary object of the FITSHandler file, the Watcher.
# the watcher observes a specified directory and calls the Handler on an event
class Watcher:
    
    def __init__(self, directory):
        self.dir = directory
        self.observer = Observer()
 
    # the main method for a Watcher, starts a thread to observe
    def watch(self):
        event_handler = Handler()
        # the recursive keyword determines whether watch observes subdirectories
        self.observer.schedule(event_handler, self.dir, recursive=True)
        self.observer.daemon=True
        self.observer.start()
        try:
            while True:
                time.sleep(5)
        except:
            self.observer.stop()
        self.observer.join()
        
    # the only function that should have to be run externally to watch a folder
    def run(directory):
        print("WATCHING")
        w = Watcher(os.path.abspath(directory))
        w.watch()

 
class Handler(FileSystemEventHandler):
    
    @staticmethod
    def on_created(event):
        # if a file has been added and is of type FITS, go
        if event.src_path[-5:] == '.fits' and not event.src_path[-12:-5] == '_HEADER':
            # sleep for 2 seconds to allow file creation to finish
            print("Received created event - %s." % event.src_path)
            # start thread to write settings into header
            Thread(target=FITSHandler.writeHeaderInSeparateFile, 
                   args=(event.src_path, sv.readFile('saves\\autosave.txt'),)).start()
 



